<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-08T08:16:52+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Echo’s Blog</title><subtitle>霄霄的个人博客</subtitle><author><name>Echo Chen</name></author><entry><title type="html">leetcode中链表反转相关问题总结</title><link href="http://localhost:4000/2020/04/04/reserve_linked_list/" rel="alternate" type="text/html" title="leetcode中链表反转相关问题总结" /><published>2020-04-04T00:00:00+00:00</published><updated>2020-04-04T00:00:00+00:00</updated><id>http://localhost:4000/2020/04/04/reserve_linked_list</id><content type="html" xml:base="http://localhost:4000/2020/04/04/reserve_linked_list/"><![CDATA[<p>链表反转应该是最基础的面试题目之一了吧，记录一下
其实我不太理解，为啥链表反转这个题目竟然还有反人类的递归方法。又难懂，空间复杂度还是O(n),他存在的意义是啥，为了考试么……
leetcode里关于链表反转的题目有很多，先看基础的吧</p>
<h2 id="基础链表反转">基础链表反转</h2>
<h4 id="题目">题目</h4>
<ol>
  <li>Reverse Linked List
Reverse a singly linked list.</li>
</ol>

<p>Example:</p>

<p>Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL
Output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL
Follow up:</p>

<p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>

<p>来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/reverse-linked-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>

<h4 id="解题思路">解题思路</h4>
<p>我觉得自己还是不太专业，这个题目，在最最开始的时候，我考虑的是当前节点cur和他下个节点cur-&gt;next，和下下个节点cur-&gt;next-&gt;next之间的链接关系的转换
这样导致一个非常麻烦的事情，就是头结点next要单独处理，会让代码很丑。而且我觉得有时候让程序做事情，就是要提取共性，尽量少的处理特殊情况。
后来也是看到了官方解题，还是其他人的代码，发现如果处理pre,cur和next之间的关系，会比较好，而且直接给pre赋值null，就可以解决反转后头结点next值的问题</p>

<h4 id="代码">代码</h4>
<p>在写代码之前，需要考虑一些问题</p>
<ul>
  <li>题目中没有说head是不是一定不为空，所以一定是要判断head之后才能用。其实如果是在真正开发的时候，对于head这种上游传过来的指针，最好也是判断一下在用，因为感觉不能完全依赖和上游的约定，碰到好多因为没判断指针然后core掉的情况。</li>
  <li>对于head为空，或者head只有一个节点的情况，可以直接返回。这种其实不做处理的话，下边真正反转的部分，也是可以处理的，但是这是浪费时间啊，最后耗时又会增长，不要！</li>
  <li>还有就是返回，反转链表，在处理完最后一组节点之后，cur指向空指针，pre在cur的前一个位置，也就是原链表的结尾，正好是反转后链表的头，所以直接返回就好了</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if (head == nullptr || head-&gt;next == nullptr) return head;
        ListNode* pre = nullptr;
        ListNode* cur = head;
        while (cur){
            ListNode* next = cur-&gt;next;
            cur-&gt;next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
};
</code></pre></div></div>
<h2 id="部分链表反转">部分链表反转</h2>
<h4 id="题目-1">题目</h4>
<ol>
  <li>Reverse Linked List II
Reverse a linked list from position m to n. Do it in one-pass.</li>
</ol>

<p>Note: 1 ≤ m ≤ n ≤ length of list.</p>

<p>Example:</p>

<p>Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4
Output: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</p>

<p>来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/reverse-linked-list-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>

<h4 id="解题思路-1">解题思路</h4>
<p>这个题目，我最开始的时候，是想着找到第m个节点，然后往后反转n个节点。虽然也通过了，但是写这篇blog的时候，就觉得，天呐，我怎么那么笨
现在看来，这个题目感觉就像是高中的数学题，很多个知识点融合在一起，拆分之后每个就都很简单了</p>
<ol>
  <li>找到需要被饭转的头结点和尾节点（快慢指针）</li>
  <li>在1的过程中，保存被反转的头结点的上个节点(pre)和尾节点的下个节点(next)</li>
  <li>反转需要反转的（基础链表反转）</li>
</ol>

<h4 id="代码-1">代码</h4>
<p>实现过程中总是需要注意的一个问题是，边界情况</p>
<ul>
  <li>m = n 或 节点为空，那不需要反转，直接返回</li>
  <li>m = 1 这种情况，pre节点还是空的，是没法法直接赋值的，所以需要一个dummy节点，dummy-&gt;next指向head，让pre=dummy，哪怕碰到m=1的情况，也不需要再额外处理了</li>
  <li>将n的下一个节点存起来，然后让n-&gt;next = nullptr，这样可以直接调用反转函数</li>
  <li>reverse函数的tail参数是指针的引用。因为C++传参是值传递，如果不加引用的话，参数中的tail其实是tail_cpy，是一个新的变量，他的值和tail一样。
这样在函数中修改了tail，其实修改的是tail_cpy。tail本身还是nullptr，再使用会有问题。
如果想修改指针指向的地址的值，直接传递指针是没问题的，但是如果要修改指针本身的指向，是不行的。</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Solution {
public:
    ListNode* reverse(ListNode* head, ListNode*&amp; tail){
        ListNode* pre = nullptr;
        ListNode* cur = head;
        tail = head;
        while (cur){
            ListNode* next = cur-&gt;next;
            cur-&gt;next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        // if m == n needn't to reserve
        // if head == null, can't be reserve
        if (m == n || head == nullptr) return head;

        //dummy node can proc situation that m = 1
        ListNode* dummy = new ListNode(0);
        dummy-&gt;next = head;
        ListNode* pre = dummy;

        //get diff and use fast slow pointer to find the range that should be reserve
        int diff = n - m;
        ListNode* fast = head;
        int index = 0;
        while (fast &amp;&amp; index &lt; diff){
            fast = fast-&gt;next;
            ++index;
        }
        ListNode* slow = head;
        index = 1;
        while (fast &amp;&amp; slow &amp;&amp; index &lt; m){
            pre = slow;
            slow = slow-&gt;next;
            fast = fast-&gt;next;
            ++index;
        }

        //save pre and next pointer
        ListNode* next = fast-&gt;next;
        ListNode* tail = nullptr;
        //cut nods which is the tail of should travered list with original list
        fast-&gt;next = nullptr;
        pre-&gt;next = reverse(slow, tail);
        tail-&gt;next = next;
        return dummy-&gt;next;
    }
};
</code></pre></div></div>

<h2 id="总结">总结</h2>
<p>链表反转，感觉只要处理好pre, cur和next的关系，尝试拆分知识点，多注意边界条件，就没啥问题了
基础链表反转，应该作为肌肉记忆，就是无论何时，需要写了，就是一次过的那种</p>]]></content><author><name>Echo Chen</name></author><category term="leetcode" /><category term="linked_list" /><summary type="html"><![CDATA[question and solution when use github page and jeklly to build a blog]]></summary></entry><entry><title type="html">leetcode中链表反转相关问题总结</title><link href="http://localhost:4000/2020/04/04/reverse_linked_list/" rel="alternate" type="text/html" title="leetcode中链表反转相关问题总结" /><published>2020-04-04T00:00:00+00:00</published><updated>2020-04-04T00:00:00+00:00</updated><id>http://localhost:4000/2020/04/04/reverse_linked_list</id><content type="html" xml:base="http://localhost:4000/2020/04/04/reverse_linked_list/"><![CDATA[<p>链表反转应该是最基础的面试题目之一了吧，记录一下
其实我不太理解，为啥链表反转这个题目竟然还有反人类的递归方法。又难懂，空间复杂度还是O(n),他存在的意义是啥，为了考试么……
leetcode里关于链表反转的题目有很多，先看基础的吧</p>
<h2 id="基础链表反转">基础链表反转</h2>
<h4 id="题目">题目</h4>
<ol>
  <li>Reverse Linked List
Reverse a singly linked list.</li>
</ol>

<p>Example:</p>

<p>Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL
Output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL
Follow up:</p>

<p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>

<p>来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/reverse-linked-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>

<h4 id="解题思路">解题思路</h4>
<p>我觉得自己还是不太专业，这个题目，在最最开始的时候，我考虑的是当前节点cur和他下个节点cur-&gt;next，和下下个节点cur-&gt;next-&gt;next之间的链接关系的转换
这样导致一个非常麻烦的事情，就是头结点next要单独处理，会让代码很丑。而且我觉得有时候让程序做事情，就是要提取共性，尽量少的处理特殊情况。
后来也是看到了官方解题，还是其他人的代码，发现如果处理pre,cur和next之间的关系，会比较好，而且直接给pre赋值null，就可以解决反转后头结点next值的问题</p>

<h4 id="代码">代码</h4>
<p>在写代码之前，需要考虑一些问题</p>
<ul>
  <li>题目中没有说head是不是一定不为空，所以一定是要判断head之后才能用。其实如果是在真正开发的时候，对于head这种上游传过来的指针，最好也是判断一下在用，因为感觉不能完全依赖和上游的约定，碰到好多因为没判断指针然后core掉的情况。</li>
  <li>对于head为空，或者head只有一个节点的情况，可以直接返回。这种其实不做处理的话，下边真正反转的部分，也是可以处理的，但是这是浪费时间啊，最后耗时又会增长，不要！</li>
  <li>还有就是返回，反转链表，在处理完最后一组节点之后，cur指向空指针，pre在cur的前一个位置，也就是原链表的结尾，正好是反转后链表的头，所以直接返回就好了</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if (head == nullptr || head-&gt;next == nullptr) return head;
        ListNode* pre = nullptr;
        ListNode* cur = head;
        while (cur){
            ListNode* next = cur-&gt;next;
            cur-&gt;next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
};
</code></pre></div></div>
<h2 id="部分链表反转">部分链表反转</h2>
<h4 id="题目-1">题目</h4>
<ol>
  <li>Reverse Linked List II
Reverse a linked list from position m to n. Do it in one-pass.</li>
</ol>

<p>Note: 1 ≤ m ≤ n ≤ length of list.</p>

<p>Example:</p>

<p>Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4
Output: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</p>

<p>来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/reverse-linked-list-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>

<h4 id="解题思路-1">解题思路</h4>
<p>这个题目，我最开始的时候，是想着找到第m个节点，然后往后反转n个节点。虽然也通过了，但是写这篇blog的时候，就觉得，天呐，我怎么那么笨
现在看来，这个题目感觉就像是高中的数学题，很多个知识点融合在一起，拆分之后每个就都很简单了</p>
<ol>
  <li>找到需要被饭转的头结点和尾节点（快慢指针）</li>
  <li>在1的过程中，保存被反转的头结点的上个节点(pre)和尾节点的下个节点(next)</li>
  <li>反转需要反转的（基础链表反转）</li>
</ol>

<h4 id="代码-1">代码</h4>
<p>实现过程中总是需要注意的一个问题是，边界情况</p>
<ul>
  <li>m = n 或 节点为空，那不需要反转，直接返回</li>
  <li>m = 1 这种情况，pre节点还是空的，是没法法直接赋值的，所以需要一个dummy节点，dummy-&gt;next指向head，让pre=dummy，哪怕碰到m=1的情况，也不需要再额外处理了</li>
  <li>将n的下一个节点存起来，然后让n-&gt;next = nullptr，这样可以直接调用反转函数</li>
  <li>reverse函数的tail参数是指针的引用。因为C++传参是值传递，如果不加引用的话，参数中的tail其实是tail_cpy，是一个新的变量，他的值和tail一样。
这样在函数中修改了tail，其实修改的是tail_cpy。tail本身还是nullptr，再使用会有问题。
如果想修改指针指向的地址的值，直接传递指针是没问题的，但是如果要修改指针本身的指向，是不行的。</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Solution {
public:
    ListNode* reverse(ListNode* head, ListNode*&amp; tail){
        ListNode* pre = nullptr;
        ListNode* cur = head;
        tail = head;
        while (cur){
            ListNode* next = cur-&gt;next;
            cur-&gt;next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        // if m == n needn't to reserve
        // if head == null, can't be reserve
        if (m == n || head == nullptr) return head;

        //dummy node can proc situation that m = 1
        ListNode* dummy = new ListNode(0);
        dummy-&gt;next = head;
        ListNode* pre = dummy;

        //get diff and use fast slow pointer to find the range that should be reserve
        int diff = n - m;
        ListNode* fast = head;
        int index = 0;
        while (fast &amp;&amp; index &lt; diff){
            fast = fast-&gt;next;
            ++index;
        }
        ListNode* slow = head;
        index = 1;
        while (fast &amp;&amp; slow &amp;&amp; index &lt; m){
            pre = slow;
            slow = slow-&gt;next;
            fast = fast-&gt;next;
            ++index;
        }

        //save pre and next pointer
        ListNode* next = fast-&gt;next;
        ListNode* tail = nullptr;
        //cut nods which is the tail of should travered list with original list
        fast-&gt;next = nullptr;
        pre-&gt;next = reverse(slow, tail);
        tail-&gt;next = next;
        return dummy-&gt;next;
    }
};
</code></pre></div></div>

<h2 id="总结">总结</h2>
<p>链表反转，感觉只要处理好pre, cur和next的关系，尝试拆分知识点，多注意边界条件，就没啥问题了
基础链表反转，应该作为肌肉记忆，就是无论何时，需要写了，就是一次过的那种</p>]]></content><author><name>Echo Chen</name></author><category term="leetcode" /><category term="linked_list" /><summary type="html"><![CDATA[question and solution when use github page and jeklly to build a blog]]></summary></entry><entry><title type="html">github page + jeklly 搭建过程及遇到的问题</title><link href="http://localhost:4000/2020/03/15/QA_about_github_page_and_jeklly/" rel="alternate" type="text/html" title="github page + jeklly 搭建过程及遇到的问题" /><published>2020-03-15T00:00:00+00:00</published><updated>2020-03-15T00:00:00+00:00</updated><id>http://localhost:4000/2020/03/15/QA_about_github_page_and_jeklly</id><content type="html" xml:base="http://localhost:4000/2020/03/15/QA_about_github_page_and_jeklly/"><![CDATA[<h3 id="github-pages-原理">GitHub Pages 原理</h3>

<p>GitHub Pages 文档：<a href="https://docs.github.com/zh/pages">https://docs.github.com/zh/pages</a>，讲的很明白。以下记录一些使用中的摘要。</p>

<h4 id="about-github-pages">About GitHub Pages</h4>

<p>GitHub Pages 是一项静态站点托管服务，它直接从 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。</p>

<h4 id="站点类型">站点类型</h4>

<p>分为项目，个人和组织。针对个人，需要创建用户名同名repository，GitHub Pages  会根据用户选择的构建方式，发布网站。访问地址为 <code class="language-plaintext highlighter-rouge">http://${username}.GitHub.io</code></p>

<h4 id="发布方式">发布方式</h4>

<p>可以选择 GitHub Action。也可选择从分支发布，如果不需要对发布流程做过多控制，则可制定分支和目录。GitHub Pages 检测到该目录下有推送时，就会进行发布。</p>

<h4 id="静态站点生成器">静态站点生成器</h4>

<p><code class="language-plaintext highlighter-rouge">如果从源分支发布站点，GitHub Pages 将默认使用 Jekyll 生成站点</code>。这也是为什么大家一般建议 GitHub Pages + Jekyll 组合进行网站搭建，因为原生支持，可以简单些。</p>

<h3 id="jekyll-原理">Jekyll 原理</h3>

<p>Jekyll 文档详见<a href="https://jekyllrb.com/docs/">https://jekyllrb.com/docs/</a>。</p>

<p>Jekyll 功能：<code class="language-plaintext highlighter-rouge">Transform your plain text into static websites and blogs.</code> 即将文本转为静态网站。</p>

<p>其优点在于，把网站模板和内容进行分离。不需要在每个博文上进行模板内容的创建，只需要关注博文本身即可。</p>

<p>对于 Jekyll，我认为主要理解各个目录的功能，直到修改 conf，修改排版，发布博文去需要操作哪些文件即可。再具体的 html 相关知识，可以用到了再看。</p>

<p>以下是一个目录示例（不完全 match 我当前目录，仅做参考）</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── _config.yml
├── _data
│   └── members.yml
├── _drafts
│   ├── begin-with-the-crazy-ideas.md
│   └── on-simplicity-in-technology.md
├── _includes
│   ├── footer.html
│   └── header.html
├── _layouts
│   ├── default.html
│   └── post.html
├── _posts
│   ├── 2007-10-29-why-every-programmer-should-play-nethack.md
│   └── 2009-04-26-barcamp-boston-4-roundup.md
├── _pages
│   ├── _about.md
│   └── _wiki.md
├── _site
├── .Jekyll-cache
│   └── Jekyll
│       └── Cache
│           └── [...]
├── .Jekyll-metadata
└── index.html # can also be an 'index.md' with valid front matter
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th><strong>File / Directory</strong></th>
      <th><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>_config.yml</td>
      <td>全局配置文件，包括 url，author，navigation 等，可以通过 site.${var_name} 访问</td>
    </tr>
    <tr>
      <td>_index.html</td>
      <td>主页，网站入口</td>
    </tr>
    <tr>
      <td>_draft</td>
      <td>草稿，可选</td>
    </tr>
    <tr>
      <td>_data</td>
      <td>blog 中可以复用的数据。通过 <code class="language-plaintext highlighter-rouge">site.data.${filename}.${varname}</code> 访问</td>
    </tr>
    <tr>
      <td>_include</td>
      <td>blog 中可以复用的 layout，比如 footer，header 等</td>
    </tr>
    <tr>
      <td>_layout</td>
      <td>不同类型页面的排版。通过layout变量制定适用那种排版</td>
    </tr>
    <tr>
      <td>_posts</td>
      <td>博文内容，按照 <code class="language-plaintext highlighter-rouge">yyyy-mm-dd-${title_name}</code> 格式命名</td>
    </tr>
    <tr>
      <td>_pages</td>
      <td>其他需要生成的网页。可以用 md 格式。Jekyll 根据 md 在 site 下生成一个同名目录，目录下存储 index.html</td>
    </tr>
    <tr>
      <td>_site</td>
      <td>生成的网页，需要加入 gitignore</td>
    </tr>
    <tr>
      <td>_assets</td>
      <td>一些模板需要的文件，基本不需要修改</td>
    </tr>
    <tr>
      <td>一些 Jekyll 需要文件(隐藏)</td>
      <td>加入 gitignore</td>
    </tr>
  </tbody>
</table>

<p>根据以上信息</p>

<ol>
  <li>修改 conf 比如博客 title 等信息，在_config.yml</li>
  <li>修改布局关注 layout 和 include</li>
  <li>发布 blog 关注 posts</li>
  <li>增加页面关注 pages</li>
  <li>修改 icon 等在 assets 下</li>
  <li>修改主页在 index.html</li>
</ol>

<h3 id="搭建过程">搭建过程</h3>

<p>网上各种教程很全面，不过多赘述了，基本就是</p>

<ol>
  <li>GitHub 创建仓库，设置</li>
  <li>Fork 对应模板+修改配置信息+定制化</li>
  <li>写博文</li>
  <li>推送</li>
</ol>

<p>下边是我自己搭建过程中的一些问题</p>

<ol>
  <li>
    <p>最开始找不到类似 about.html 和 link.html 这类文件在哪里，想不明白为什么只有一个 index.html 也能工作。后来又重新翻了下 jeklly 的文档<a href="http://jekyllcn.com/docs/pages/">http://jekyllcn.com/docs/pages/</a>。文档中提到，将 <code class="language-plaintext highlighter-rouge">HTML或者Markdown</code> 文件放在站点根目录下，或者在根目录下创建一个文件夹用来存放，都能实现创建页面的功能，只是 url 的格式不同。然后我就在 clone 的文件下找到了 page 目录，里边存放了包括 about，link 等 md 文件。如果不需要哪个页面，删掉或者修改后缀就可以。同时注意修改 _config.yml 文件中相关的配置，会涉及到 heaer 的显示。</p>
  </li>
  <li>
    <p>由于我先在还没申请评 disqus 的账户，所以暂时需要把评论功能去掉。当前代码是在  _layout.html的各个模板中，引用了 _include/comment.html，完成评论模块的添加。暂时注释掉即可，申请 disqus 账号后，取消掉所有注释，模块即可生效。</p>
  </li>
  <li>
    <p>修改和2类似，在_layout/*.html 中，引用了 repositories 的 html 文件的代码删掉，换成分类的 html</p>
  </li>
  <li>
    <p>之前下载过另外一个模板的代码，左边是学历工作经验，右侧是skill和英语水平。学历和工作部分还有 timeline 链接。</p>

    <p>直接把代码照办过来却不生效。点击的时候报错缺少文件。按照提示把缺少的文件补全，还是没有效果。</p>

    <p>我对 html 的了解几乎为0，猜测是代码和模板本身的风格和主题有某种冲突，且 about 的优先级比较低，造成代码不生效。</p>

    <p>暂时解决方案为左侧用 markdown 书写，右侧写成一个 html 文件，用类似添加 sidebar 的方法，嵌套在 layout/about.html中，算是暂时完成了这个功能。后续待对 html 了解更加深入后，再改成想要的风格。</p>
  </li>
</ol>

<h2 id="jekyll-本地预览">Jekyll 本地预览</h2>

<p>页面修改完了，本地看下效果比较方便，所以需要在本地安装jekylly</p>

<p>安装 Jekyll 主要依赖 ruby 和 bandler</p>

<h4 id="1--ruby">1.  Ruby</h4>

<p>mac 自带 ruby，但是版本太低不能用，Jekyll 至少要 ruby@2.7</p>

<p>mac 安装那必须是 brew 大法好。 ( ps : 自己搞才知道之前百度的基建做的有多好，啥都有，网速还快)</p>

<p>brew 使用的是清华的镜像，最开始考虑无脑 <code class="language-plaintext highlighter-rouge">brew install ruby</code>。但是直接 install 版本太新了，需要很多的依赖，家里电脑 2core i5，真心编不动 llvm，编了 5 个小时吧，失败了。最后用了 ruby@3.1。</p>

<p>安装完成后，因为 brew 安装的位置不是在 <code class="language-plaintext highlighter-rouge">/usr/local/bin</code>，所以需要自己在 PATH 里配置一下环境变量，并且source 生效，source 后再看 version就是3.1了</p>

<p>Tips：install 会显示 dependencies。这时候最好按照这个 list 手动一个一个 install，要不万一中途哪个失败了，又要去 download rb 文件，非常非常耗时。</p>

<h4 id="2-bundler">2. bundler</h4>

<p>直接用 gem 安装 bundler 和 Jekyll 即可</p>

<p>ps：ruby@3.x 以上版本，需要在 Gemfile.lock 中做一些特殊的配置 <code class="language-plaintext highlighter-rouge">webrick (~&gt; 1.9)</code> ，才可以正常使用</p>

<h3 id="致谢">致谢</h3>

<p>博客的模板和排版的中文排版要求参考如下：</p>

<p><a href="https://github.com/mzlogin/mzlogin.github.io">https://github.com/mzlogin/mzlogin.github.io</a></p>

<p><a href="https://mazhuang.org/wiki/chinese-copywriting-guidelines">https://mazhuang.org/wiki/chinese-copywriting-guidelines</a></p>

<p>感谢大佬！</p>]]></content><author><name>Echo Chen</name></author><category term="Blog" /><summary type="html"><![CDATA[question and solution when use github page and jeklly to build a blog]]></summary></entry></feed>